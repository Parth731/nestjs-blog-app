var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.787,1,3.065,2,1.462,3,0.529,4,0.455,5,0.455,6,3.33,7,0.647,8,0.039,9,0.97,10,2.631,11,3.33,12,0.529,13,0.026,14,2.507,15,1.792,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.816,2,1.437,3,0.378,4,0.326,5,0.326,7,0.693,8,0.039,9,0.693,10,2.611,11,2.38,12,0.378,13,0.019,16,0.026,17,0.026,18,1.768,19,3.584,20,1.281,21,1.281,22,1.592,23,1.592,24,1.281,25,2.501,26,1.592,27,2.38,28,2.38,29,2.38,30,2.611,31,2.917,32,2.349,33,2.188,34,1.592,35,1.424,36,2.891,37,2.464,38,2.891,39,2.891,40,2.891,41,2.891,42,1.424,43,1.792]],["title/injectables/AppService.html",[10,1.477,44,1.083]],["body/injectables/AppService.html",[3,0.508,4,0.437,5,0.437,7,0.508,8,0.038,9,0.931,10,2.375,12,0.508,13,0.025,16,0.031,17,0.031,44,1.742,45,2.137,46,3.195,47,0.835,48,2.375,49,5.484,50,1.146,51,3.881,52,1.912,53,1.742,54,1.912,55,3.881,56,3.881]],["title/controllers/AuthController.html",[0,1.083,57,1.858]],["body/controllers/AuthController.html",[0,1.417,2,1.417,3,0.513,4,0.441,5,0.441,7,0.634,8,0.039,9,0.94,12,0.513,13,0.025,14,2.431,15,1.738,16,0.031,17,0.031,57,3.007,58,3.228,59,2.771,60,3.993,61,2.334,62,3.228,63,3.921,64,2.158,65,2.158]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.54,3,0.419,4,0.361,5,0.361,7,0.667,8,0.039,9,0.768,12,0.419,13,0.021,16,0.028,17,0.028,18,1.73,20,1.42,21,1.42,22,1.764,23,1.764,24,1.42,25,2.635,26,2.635,30,2.746,32,1.888,33,2.345,34,1.764,35,1.578,37,1.986,57,2.968,61,2.604,62,2.637,66,2.637,67,2.637,68,2.637,69,3.204,70,2.641,71,3.204,72,2.637]],["title/injectables/AuthService.html",[44,1.083,61,1.329]],["body/injectables/AuthService.html",[3,0.359,4,0.309,5,0.309,7,0.502,8,0.039,9,0.659,12,0.359,13,0.018,15,1.217,16,0.025,17,0.025,42,1.89,44,1.386,45,1.512,47,0.591,48,1.89,50,1.305,52,1.89,53,2.031,54,1.89,61,1.7,64,1.512,65,1.512,70,1.703,73,2.261,74,2.871,75,3.94,76,4.421,77,2.712,78,2.261,79,2.141,80,2.747,81,2.112,82,2.112,83,1.133,84,1.7,85,2.747,86,2.747,87,3.837,88,3.64,89,2.434,90,2.747,91,1.942,92,2.261,93,2.261,94,1.353,95,2.261,96,1.942,97,2.261,98,2.747,99,2.261,100,1.942,101,2.747,102,3.837,103,2.747,104,1.942]],["title/classes/CreatePostDto.html",[13,0.019,105,1.65]],["body/classes/CreatePostDto.html",[3,0.158,4,0.136,5,0.136,7,0.486,8,0.039,12,0.158,13,0.017,16,0.013,17,0.013,43,0.749,47,0.26,50,1.317,53,1.815,83,1.518,84,2.08,104,2.177,105,1.118,106,0.536,107,3.24,108,0.854,109,1.164,110,3.061,111,2.627,112,2.627,113,3.416,114,2.627,115,2.627,116,3.433,117,1.857,118,3.433,119,3.254,120,1.976,121,2.535,122,1.833,123,3.152,124,1.209,125,1.209,126,2.031,127,2.031,128,3.061,129,1.209,130,1.209,131,1.909,132,1.209,133,3.079,134,1.672,135,1.672,136,2.031,137,1.209,138,1.209,139,1.209,140,2.031,141,1.949,142,3.079,143,2.628,144,1.436,145,1.672,146,1.209,147,1.209,148,2.031,149,1.672,150,2.031,151,2.031,152,2.031,153,2.031,154,2.031,155,1.209,156,1.209,157,2.031,158,2.031,159,2.627,160,2.031,161,2.031,162,2.031,163,2.031,164,1.209,165,1.209,166,1.209,167,1.209,168,3.433,169,1.209,170,3.079,171,3.079,172,1.672,173,2.031,174,2.031,175,2.031,176,2.031,177,2.031,178,1.209,179,2.827,180,1.672,181,2.031,182,1.672,183,1.209,184,1.209,185,2.031,186,1.209,187,1.209,188,3.079,189,1.209,190,1.209,191,1.209,192,1.209,193,2.627,194,1.209,195,2.031,196,2.031,197,2.128,198,2.794,199,2.128,200,2.031,201,0.995,202,0.995,203,2.031,204,0.596,205,1.209,206,1.209,207,1.436,208,1.209,209,0.854,210,3.061,211,3.061,212,0.596,213,1.209,214,2.031,215,0.995,216,1.209,217,1.209,218,1.209,219,1.209,220,1.209,221,1.209,222,1.209,223,1.209,224,1.209,225,0.995,226,2.163,227,0.995,228,1.209,229,2.031,230,0.995,231,1.209]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.019,131,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.461,4,0.397,5,0.397,7,0.461,8,0.038,12,0.461,13,0.029,16,0.029,17,0.029,47,0.758,50,1.34,53,1.639,83,1.34,106,1.563,107,3.545,109,2.011,120,2.011,122,2.006,131,2.812,143,3.545,197,3.283,199,2.812,204,1.737,207,3.545,226,4.129,232,2.903,233,3.526,234,3.526,235,3.526]],["title/classes/CreateUserDto.html",[13,0.019,236,1.65]],["body/classes/CreateUserDto.html",[3,0.338,4,0.291,5,0.291,7,0.338,8,0.038,12,0.338,13,0.024,16,0.024,17,0.024,47,0.555,50,1.375,53,1.943,83,1.375,84,1.627,88,3.519,91,3.021,106,1.144,109,1.627,120,2.063,172,3.023,197,2.886,198,2.596,199,3.049,201,2.125,202,2.125,204,1.272,225,3.023,236,2.021,237,4.05,238,1.825,239,3.519,240,4.274,241,2.581,242,2.581,243,2.581,244,2.581,245,2.581,246,2.581,247,2.581,248,3.672,249,3.672,250,3.672,251,3.672,252,3.672,253,5.376,254,3.672,255,4.656,256,3.672,257,2.021,258,3.672,259,3.672,260,2.581,261,3.672,262,3.672,263,2.581,264,3.672,265,2.581,266,2.581]],["title/classes/GetUsersParamDto.html",[13,0.019,267,1.65]],["body/classes/GetUsersParamDto.html",[3,0.399,4,0.344,5,0.344,7,0.611,8,0.039,12,0.399,13,0.03,16,0.027,17,0.027,42,2.032,47,0.656,50,1.379,83,1.543,89,2.877,94,2.465,106,1.352,109,1.828,120,1.352,121,2.512,123,2.556,141,1.22,198,2.915,199,1.892,204,1.503,209,2.157,211,3.395,212,1.503,257,3.031,267,2.27,268,4.119,269,2.512,270,3.302,271,3.302,272,4.124,273,3.051,274,3.051,275,3.051,276,3.051,277,3.395,278,3.051]],["title/classes/PatchPostDto.html",[13,0.019,279,1.858]],["body/classes/PatchPostDto.html",[3,0.443,4,0.381,5,0.381,7,0.644,8,0.039,12,0.443,13,0.029,16,0.029,17,0.029,43,2.099,47,0.728,50,1,83,1,89,2.978,105,1.864,106,1.501,108,2.394,109,1.959,120,1.501,122,1.767,141,1.354,149,2.788,197,2.74,204,1.669,210,3.638,212,1.669,257,2.433,277,3.638,279,2.74,280,3.638,281,3.638,282,4.42,283,4.42,284,3.387,285,3.387,286,2.788,287,2.788,288,2.788]],["title/classes/PatchUserDto.html",[13,0.019,289,1.858]],["body/classes/PatchUserDto.html",[3,0.529,4,0.455,5,0.455,7,0.647,8,0.038,12,0.529,13,0.026,16,0.032,17,0.032,43,2.507,106,1.792,236,2.226,238,2.859,281,4.07,286,3.33,289,3.065,290,3.33,291,4.944,292,3.33,293,3.33,294,3.33]],["title/controllers/PostsController.html",[0,1.083,295,1.858]],["body/controllers/PostsController.html",[0,0.752,2,0.752,3,0.272,4,0.234,5,0.234,7,0.589,8,0.039,9,0.499,12,0.272,13,0.013,14,1.289,15,0.922,16,0.02,17,0.02,47,0.447,48,1.544,50,1.114,52,1.858,53,1.363,54,1.858,59,1.47,64,1.145,65,1.145,74,2.849,81,2.076,82,2.076,83,1.114,84,1.672,105,2.784,117,2.216,120,1.672,122,2.023,128,3.457,141,1.679,212,1.025,279,3.135,287,2.58,288,2.58,295,1.943,296,1.712,297,2.58,298,3.134,299,3.134,300,3.134,301,2.08,302,3.134,303,3.134,304,2.216,305,3.134,306,4.199,307,4.199,308,3.134,309,2.08,310,2.08,311,2.08,312,3.134,313,2.08,314,2.58,315,2.08,316,3.134,317,3.134,318,3.457,319,2.08,320,2.08,321,1.712,322,1.712,323,2.58,324,1.858,325,1.712,326,3.105,327,3.105,328,1.712,329,1.712,330,1.712,331,2.08,332,2.08,333,2.08,334,2.08,335,2.08,336,2.58,337,2.58,338,2.08,339,2.08,340,2.08]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.561,3,0.428,4,0.368,5,0.368,7,0.673,8,0.039,9,0.785,12,0.428,13,0.021,16,0.028,17,0.028,18,1.748,20,1.45,21,1.45,22,1.801,23,1.801,24,1.45,25,2.663,26,1.801,31,3.131,32,2.435,33,2.378,34,1.801,35,1.612,37,2.678,72,2.693,295,2.999,324,2.707,325,2.693,341,2.693,342,2.693,343,3.272,344,3.272,345,3.272]],["title/injectables/PostsService.html",[44,1.083,324,1.477]],["body/injectables/PostsService.html",[3,0.382,4,0.329,5,0.329,7,0.524,8,0.039,9,0.701,12,0.382,13,0.019,15,1.296,16,0.026,17,0.026,42,2.537,44,1.448,45,1.61,47,0.629,48,1.974,50,1.183,52,1.441,53,1.651,54,1.441,64,1.61,65,1.61,74,2.515,77,2.832,78,2.407,79,2.126,81,2.205,82,2.205,83,1.183,84,1.775,93,2.407,94,1.441,96,2.067,100,2.067,110,4.047,119,3.298,122,1.966,314,2.407,324,1.974,346,2.407,347,4.006,348,2.924,349,4.006,350,2.924,351,2.924,352,3.298,353,4.006]],["title/injectables/UserService.html",[44,1.083,79,1.199]],["body/injectables/UserService.html",[3,0.27,4,0.232,5,0.232,7,0.491,8,0.039,9,0.495,12,0.27,13,0.024,15,0.914,16,0.02,17,0.02,42,2.326,44,1.126,45,1.136,47,0.444,48,1.535,50,1.108,52,1.535,53,1.622,54,1.535,60,1.698,61,2.172,64,1.136,65,1.136,70,1.279,74,2.599,75,3.443,77,2.202,79,1.246,81,2.066,82,2.066,83,1.108,84,1.663,89,2.471,91,2.956,92,1.698,94,2.212,95,1.698,96,1.458,99,2.565,100,1.458,141,0.825,239,3.443,257,2.698,267,2.599,270,2.653,271,2.653,297,2.565,354,1.698,355,3.115,356,2.565,357,3.115,358,3.115,359,3.115,360,3.754,361,3.115,362,2.063,363,2.063,364,3.115,365,2.063,366,2.063,367,4.182,368,3.115,369,2.063,370,3.115,371,2.565,372,1.698,373,1.698,374,2.063,375,2.063,376,2.063,377,3.115,378,3.115,379,2.063,380,2.063,381,2.063]],["title/controllers/UsersController.html",[0,1.083,382,1.858]],["body/controllers/UsersController.html",[0,0.614,2,0.614,3,0.222,4,0.191,5,0.191,7,0.598,8,0.038,9,0.407,12,0.222,13,0.011,14,1.053,15,0.753,16,0.017,17,0.017,42,1.321,47,0.365,48,1.321,50,0.981,52,1.637,53,0.614,54,2.023,59,1.201,74,2.683,79,1.328,81,1.829,82,2.261,83,1.349,84,1.672,89,0.935,94,1.859,104,1.896,117,1.201,120,1.472,122,1.509,123,2.339,134,3.106,135,2.208,141,1.745,144,1.896,212,0.837,230,2.208,236,2.515,257,2.927,267,2.402,270,3.085,271,3.085,289,2.936,294,2.208,304,1.896,318,2.208,321,1.399,322,2.208,323,2.735,326,2.208,327,2.208,328,1.399,329,1.399,330,1.399,336,1.399,337,2.208,352,2.208,372,1.399,373,1.399,382,1.662,383,1.399,384,2.682,385,3.322,386,2.682,387,1.699,388,1.699,389,1.699,390,1.699,391,2.682,392,2.682,393,2.682,394,1.699,395,2.682,396,2.682,397,1.699,398,2.682,399,2.682,400,2.682,401,3.772,402,1.699,403,2.682,404,2.682,405,1.699,406,1.699,407,1.699,408,1.699,409,1.699,410,1.699,411,1.699,412,3.322,413,1.699,414,1.699,415,2.682,416,1.399,417,1.399,418,3.322,419,1.699,420,1.699,421,1.699,422,1.699,423,1.399,424,1.699,425,1.699,426,1.699,427,1.699,428,1.699,429,1.699,430,1.699,431,1.699,432,1.699,433,1.699,434,1.699,435,1.699,436,1.699]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.54,3,0.419,4,0.361,5,0.361,7,0.667,8,0.039,9,0.768,12,0.419,13,0.021,16,0.028,17,0.028,18,1.73,20,1.42,21,1.42,22,1.764,23,1.764,24,1.42,25,2.635,26,2.635,30,2.099,32,2.47,33,2.345,34,1.764,35,1.578,37,1.986,70,2.641,79,2.35,382,2.968,417,2.637,437,2.637,438,2.637,439,2.637,440,3.204,441,3.204,442,3.204]],["title/coverage.html",[443,2.88]],["body/coverage.html",[0,1.754,1,1.759,5,0.32,6,2.336,8,0.038,10,1.398,13,0.034,16,0.025,17,0.025,24,1.258,44,1.754,46,2.336,57,1.759,58,2.336,61,1.258,73,2.336,79,1.135,83,0.838,94,1.398,105,1.562,107,2.774,108,2.774,122,1.135,131,1.759,207,2.006,227,2.336,232,2.336,236,1.562,237,2.336,238,2.774,267,1.562,268,2.336,269,2.336,279,1.759,280,2.336,289,1.759,290,2.336,295,1.759,296,2.336,304,2.006,324,1.398,346,2.336,354,2.336,356,2.336,382,1.759,383,2.336,443,2.006,444,2.336,445,2.838,446,5.841,447,4.853,448,3.924,449,4.853,450,2.336,451,2.838,452,3.924,453,2.838,454,2.838,455,2.838,456,2.838,457,2.838]],["title/dependencies.html",[21,1.596,458,2.068]],["body/dependencies.html",[8,0.039,9,0.912,13,0.031,16,0.031,17,0.031,21,1.686,204,1.875,209,2.689,212,1.875,292,3.132,293,3.132,416,3.132,459,3.805,460,3.805,461,5.196,462,3.805,463,3.805,464,3.805,465,3.805,466,3.805,467,3.805,468,3.805,469,3.805,470,3.805,471,3.805,472,3.805,473,3.805,474,3.805]],["title/miscellaneous/enumerations.html",[475,1.557,476,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,16,0.03,17,0.03,47,0.803,113,3.872,122,1.88,143,4.131,144,3.324,145,3.872,179,3.872,180,3.872,182,3.872,215,3.872,475,2.313,476,3.072,477,3.731,478,3.731,479,3.731,480,4.703,481,4.703,482,3.731]],["title/miscellaneous/functions.html",[475,1.557,483,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.475,47,0.966,450,3.698,475,2.785,483,3.698,484,4.492]],["title/index.html",[47,0.54,485,2.512,486,2.512]],["body/index.html",[4,0.262,8,0.037,16,0.022,17,0.022,35,2.188,97,3.656,123,2.501,141,0.932,371,1.919,423,2.809,443,1.648,444,1.919,487,2.331,488,2.331,489,4.035,490,2.331,491,2.331,492,2.331,493,2.331,494,2.331,495,2.331,496,4.035,497,2.331,498,2.331,499,2.331,500,4.441,501,2.331,502,5.1,503,2.331,504,5.1,505,2.331,506,2.331,507,2.331,508,3.412,509,2.331,510,2.331,511,2.331,512,4.035,513,2.331,514,3.412,515,2.331,516,2.331,517,2.331,518,2.331,519,2.331,520,2.331,521,2.331,522,2.331,523,4.441,524,3.412,525,2.331,526,4.035,527,2.331,528,3.656,529,3.412,530,2.331,531,2.331,532,2.331,533,2.331,534,2.331,535,2.331,536,4.035,537,2.331,538,2.331,539,2.331,540,2.331,541,2.331,542,2.331,543,4.035,544,2.331,545,2.331,546,2.331,547,2.331,548,2.331,549,2.331,550,3.412,551,2.331,552,2.331,553,2.331,554,2.331,555,2.331,556,2.331,557,3.412,558,2.331,559,2.331,560,2.331,561,3.412,562,3.412,563,2.331,564,2.331,565,2.331,566,2.331,567,2.331,568,2.331,569,2.331,570,2.331,571,2.331,572,2.331,573,2.331,574,1.919,575,2.331,576,2.331,577,2.331,578,2.331,579,2.331,580,2.331,581,1.919]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.589,20,1.851,30,2.057,31,2.299,32,1.851,528,4.63,582,5.624,583,5.624,584,5.624]],["title/overview.html",[585,3.355]],["body/overview.html",[2,1.094,8,0.038,10,2.292,16,0.027,17,0.027,18,1.094,19,3.551,20,1.342,21,1.342,22,1.667,23,1.667,24,1.342,25,1.667,26,1.667,27,2.492,28,2.492,29,2.492,30,2.647,31,3.025,32,2.435,33,2.258,34,1.667,35,1.492,45,1.667,61,2.435,66,2.492,67,2.492,68,2.492,79,2.197,106,1.342,324,2.292,341,2.492,342,2.492,437,2.492,438,2.492,439,2.492,585,2.492,586,4.652,587,3.028]],["title/properties.html",[109,1.596,458,2.068]],["body/properties.html",[8,0.038,16,0.034,17,0.034,109,1.957,141,1.765,574,3.635,581,3.635,588,4.415,589,4.415,590,4.415]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":589,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":352,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.25",{"_index":460,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":461,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["10})@apiquery({name",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["123",{"_index":381,"title":{},"body":{"injectables/UserService.html":{}}}],["1234",{"_index":278,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":273,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":353,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3.2.3",{"_index":463,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":586,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":587,"title":{},"body":{"overview.html":{}}}],["7.4.0",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["amazing",{"_index":567,"title":{},"body":{"index.html":{}}}],["api",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":302,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":495,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":57,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":574,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":61,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["backers",{"_index":568,"title":{},"body":{"index.html":{}}}],["based",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["blog",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["board",{"_index":560,"title":{},"body":{"index.html":{}}}],["body",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":584,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":582,"title":{},"body":{"modules.html":{}}}],["building",{"_index":490,"title":{},"body":{"index.html":{}}}],["business",{"_index":358,"title":{},"body":{"injectables/UserService.html":{}}}],["channel",{"_index":531,"title":{},"body":{"index.html":{}}}],["character",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":106,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":341,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":343,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":342,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":437,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":438,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":439,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":520,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":459,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":355,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('isauthenticated",{"_index":376,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(createpostdto",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":362,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(userservice",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":538,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":443,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":298,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":301,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":105,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":131,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":303,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":236,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["date",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":533,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":505,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":544,"title":{},"body":{"index.html":{}}}],["discord",{"_index":530,"title":{},"body":{"index.html":{}}}],["dive",{"_index":532,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":444,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":372,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":515,"title":{},"body":{"index.html":{}}}],["each",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":491,"title":{},"body":{"index.html":{}}}],["email",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["end",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["enterprise",{"_index":549,"title":{},"body":{"index.html":{}}}],["entries",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":476,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["exists",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["experience",{"_index":535,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":281,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetch",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":518,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(getusersparamdto",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":368,"title":{},"body":{"injectables/UserService.html":{}}}],["findpostsbyuserid",{"_index":347,"title":{},"body":{"injectables/PostsService.html":{}}}],["findpostsbyuserid(userid",{"_index":349,"title":{},"body":{"injectables/PostsService.html":{}}}],["firstname",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["follow",{"_index":553,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":489,"title":{},"body":{"index.html":{}}}],["full",{"_index":548,"title":{},"body":{"index.html":{}}}],["function",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":483,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":299,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":485,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":267,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["graph",{"_index":540,"title":{},"body":{"index.html":{}}}],["grow",{"_index":564,"title":{},"body":{"index.html":{}}}],["hands",{"_index":534,"title":{},"body":{"index.html":{}}}],["handy",{"_index":521,"title":{},"body":{"index.html":{}}}],["head",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["headers",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":546,"title":{},"body":{"index.html":{}}}],["here",{"_index":572,"title":{},"body":{"index.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isoptional()@isurl",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://localhost:3000/users",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["https://nestjs.com",{"_index":578,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":44,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":45,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["installcompile",{"_index":503,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":541,"title":{},"body":{"index.html":{}}}],["ip",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauthenticated",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isemail",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":277,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["iso8601",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring()@isnotempty",{"_index":233,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@isemail",{"_index":241,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":243,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/(?=.*\\d)(?=.*[a",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstrongpassword",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":379,"title":{},"body":{"injectables/UserService.html":{}}}],["jane@doe.com",{"_index":380,"title":{},"body":{"injectables/UserService.html":{}}}],["job",{"_index":557,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":559,"title":{},"body":{"index.html":{}}}],["john",{"_index":377,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":378,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":570,"title":{},"body":{"index.html":{}}}],["json",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":575,"title":{},"body":{"index.html":{}}}],["key",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["lastname",{"_index":240,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":525,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":581,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":562,"title":{},"body":{"index.html":{}}}],["limit",{"_index":270,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["linkedin",{"_index":555,"title":{},"body":{"index.html":{}}}],["list",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost:3000/posts/:userid",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["login",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":556,"title":{},"body":{"index.html":{}}}],["loop",{"_index":551,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/(?=.*\\d)(?=.*[a",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minimum",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":475,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":561,"title":{},"body":{"index.html":{}}}],["mode",{"_index":508,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":526,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":576,"title":{},"body":{"index.html":{}}}],["name",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":545,"title":{},"body":{"index.html":{}}}],["needs",{"_index":283,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":496,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":580,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":523,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":462,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":464,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":292,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":304,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":488,"title":{},"body":{"index.html":{}}}],["npm",{"_index":502,"title":{},"body":{"index.html":{}}}],["number",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":558,"title":{},"body":{"index.html":{}}}],["official",{"_index":536,"title":{},"body":{"index.html":{}}}],["offset",{"_index":271,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["one",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":563,"title":{},"body":{"index.html":{}}}],["operations",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["option",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options.dto",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":232,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":234,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":235,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":585,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":458,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":373,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":269,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":274,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["param.dto.ts:15",{"_index":275,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["param.dto.ts:16",{"_index":276,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":547,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":286,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":282,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":291,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":279,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuserdto",{"_index":289,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["patchusers",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchusers(@body",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchusers(patchuserdto",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["per",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":357,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["please",{"_index":529,"title":{},"body":{"index.html":{}}}],["point",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["position",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["possiable",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@isnotempty",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":287,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:100",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":285,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:125",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:28",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:49",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:57",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:65",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:75",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:83",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:91",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":297,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["posts.controller",{"_index":345,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":295,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":324,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":510,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":487,"title":{},"body":{"index.html":{}}}],["project",{"_index":500,"title":{},"body":{"index.html":{}}}],["properties",{"_index":109,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provider/auth.service",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/posts.service",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/user.service",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('offset",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":527,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":571,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":542,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":499,"title":{},"body":{"index.html":{}}}],["req",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":519,"title":{},"body":{"index.html":{}}}],["response",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":481,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":504,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["sample",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":492,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":480,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["scheduled','review",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["send",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":493,"title":{},"body":{"index.html":{}}}],["service",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["setup",{"_index":501,"title":{},"body":{"index.html":{}}}],["side",{"_index":494,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["single",{"_index":370,"title":{},"body":{"injectables/UserService.html":{}}}],["slug",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spaces",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":272,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":566,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":484,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":477,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":478,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":51,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":442,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/provider/auth.service",{"_index":374,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/provider/auth.service.ts",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/provider/auth.service.ts:12",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/provider/auth.service.ts:21",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/provider/auth.service.ts:5",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":450,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":280,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":479,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":482,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":296,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:15",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:27",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":344,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":346,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:11",{"_index":350,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":348,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":268,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":290,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/user.service.ts",{"_index":354,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:22",{"_index":366,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:44",{"_index":369,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:9",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.controller.ts",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:53",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":440,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":506,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":509,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":511,"title":{},"body":{"index.html":{}}}],["started",{"_index":486,"title":{"index.html":{}},"body":{}}],["starter",{"_index":498,"title":{},"body":{"index.html":{}}}],["statements",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":550,"title":{},"body":{"index.html":{}}}],["story",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":528,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":583,"title":{},"body":{"modules.html":{}}}],["table",{"_index":356,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":514,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":517,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":516,"title":{},"body":{"index.html":{}}}],["tests",{"_index":512,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":565,"title":{},"body":{"index.html":{}}}],["this.authservice.isauthenticated",{"_index":375,"title":{},"body":{"injectables/UserService.html":{}}}],["this.postsservice.findpostsbyuserid(userid",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findall(getusersparamdto",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyid('1234",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(userid",{"_index":351,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":543,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":573,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["true})@minlength(3",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":579,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["types",{"_index":293,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":497,"title":{},"body":{"index.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":513,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":590,"title":{},"body":{"properties.html":{}}}],["update",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":288,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":284,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":300,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":552,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto",{"_index":294,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:17",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":242,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":441,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":382,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":79,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":371,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["valid",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["values'})@isoptional()@isarray()@isstring({each",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":588,"title":{},"body":{"properties.html":{}}}],["video",{"_index":537,"title":{},"body":{"index.html":{}}}],["visit",{"_index":524,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":539,"title":{},"body":{"index.html":{}}}],["want",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":507,"title":{},"body":{"index.html":{}}}],["website",{"_index":577,"title":{},"body":{"index.html":{}}}],["without",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":522,"title":{},"body":{"index.html":{}}}],["world",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":554,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":569,"title":{},"body":{"index.html":{}}}],["z",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z0",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z])(?=.*[a",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n/*\n *user create module\n */\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './provider/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  // injecting auth service\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './provider/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/provider/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                IsAuthenticated\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/provider/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        IsAuthenticated\n                        \n                    \n                \n            \n            \n                \n                        \n                    IsAuthenticated()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/provider/auth.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/provider/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting users service\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    //check user exists database\n    const user = this.userService.findOneById('1234');\n\n    //login\n    //token\n    return 'sample token';\n  }\n\n  public IsAuthenticated() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of the post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'featured image for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possiable value, 'post', 'page', 'story', 'series''})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces for example \"my-url\" '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'possiable value 'draft', 'scheduled','review', 'published' '})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values'})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from '../enums/postType.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: \"Possiable value, 'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  //my-url\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces for example \"my-url\" ',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"possiable value 'draft', 'scheduled','review', 'published' \",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of the post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n    \"@context\": \"https://schema.org\",\\r\\n    \"@type\": \"Person\"\\r\\n  }',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'featured image for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string values',\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description: 'This key can be string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key',\n          example: 'sidebarEnabled',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])/, {message: 'Minimum 8 characters, at least one uppercase letter, one lowercase letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsStrongPassword,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  //   @IsStrongPassword()\n  @MinLength(8)\n  @Matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])/, {\n    message:\n      'Minimum 8 characters, at least one uppercase letter, one lowercase letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsString } from 'class-validator';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id: number;\n\n  limit: number;\n  offset: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'the ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'the ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreatePostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update an existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchPostDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  // injecting posts service\n  constructor(private readonly postsService: PostsService) {}\n\n  //get localhost:3000/posts/:userId\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findPostsByUserId(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n    return createPostDto;\n  }\n\n  @ApiOperation({\n    summary: 'Update an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return patchPostDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findPostsByUserId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findPostsByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findPostsByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    // injecting users service\n    private readonly userService: UserService,\n  ) {}\n\n  public findPostsByUserId(userId: string) {\n    const user = this.userService.findOneById(userId);\n\n    return [\n      {\n        user: user,\n        title: 'post 1',\n        content: 'post 1 content',\n      },\n      {\n        user: user,\n        title: 'post 2',\n        content: 'post 2 content',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                class to connect users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            the method to get all the users from the database\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, offset: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:22\n                        \n                    \n\n\n            \n                \n                        find all posts by isAuthenticated user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:44\n                        \n                    \n\n\n            \n                \n                        find a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/provider/auth.service';\n\n/**\n * class to connect users table and perform business operations\n */\n@Injectable()\nexport class UserService {\n  /**\n   * the method to get all the users from the database\n   */\n  constructor(\n    //injecting auth service\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * find all posts by isAuthenticated user\n   */\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    offset: number,\n  ) {\n    const isAuthenticated = this.authService.IsAuthenticated();\n    console.log('isAuthenticated: ', isAuthenticated);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Jane',\n        email: 'jane@doe.com',\n      },\n    ];\n  }\n  /**\n   * find a single user using the ID of user\n   */\n  public findOneById(id: string) {\n    return {\n      id: 123,\n      firstName: 'John',\n      email: 'john@doe.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                CreateUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                GetUsers\n                            \n                            \n                                    \n                                    Public\n                                PatchUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        CreateUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    CreateUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        GetUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUsers(getUsersParamDto: GetUsersParamDto, limit: number, offset: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'User fetch successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'offset', type: 'number', required: true, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                offset\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        PatchUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    PatchUsers(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Head,\n  Headers,\n  Ip,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n//https://localhost:3000/users\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get('/:id?') //id is optional\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User fetch successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'offset',\n    type: 'number',\n    required: true,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public GetUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('offset', new DefaultValuePipe(1), ParseIntPipe) offset: number,\n  ) {\n    return this.userService.findAll(getUsersParamDto, limit, offset);\n  }\n\n  @Post()\n  public CreateUsers(@Body() createUserDto: CreateUserDto) {\n    console.log(createUserDto instanceof CreateUserDto);\n    return 'you send a post request to end point';\n  }\n\n  @Patch()\n  public PatchUsers(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UserService],\n  exports: [UserService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/provider/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
